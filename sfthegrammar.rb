# Autogenerated from a Treetop grammar. Edits may be lost.


require "rubygems"
require "treetop"

module SFTheList
  include Treetop::Runtime

  def root
    @root ||= :list
  end

  module List0
    def content
      elements.map do |e|
        e.content
      end
    end
  end

  def _nt_list
    start_index = index
    if node_cache[:list].has_key?(index)
      cached = node_cache[:list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_show
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(List0)

    node_cache[:list][start_index] = r0

    r0
  end

  module Whitespace0
    def content
        [:whitespace]
    end
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Whitespace0)
    end

    node_cache[:whitespace][start_index] = r0

    r0
  end

  module Show0
    def weekday
      elements[0]
    end

    def whitespace
      elements[1]
    end
  end

  module Show1
    def date
      elements[0]
    end

    def venue
      elements[3]
    end

    def whitespace
      elements[4]
    end

    def age_restriction
      elements[5]
    end

    def notes
      elements[6]
    end

  end

  module Show2
    def content
      elements.map do |e| 
        if (defined? e.content )
          e.content
        else
          e.text_value
        end
      end
    end
  end

  def _nt_show
    start_index = index
    if node_cache[:show].has_key?(index)
      cached = node_cache[:show][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_date
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_weekday
      s3 << r4
      if r4
        r5 = _nt_whitespace
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Show0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r7 = _nt_bands_and_venue_prefix
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r6
        if r6
          r8 = _nt_venue
          s0 << r8
          if r8
            r9 = _nt_whitespace
            s0 << r9
            if r9
              r10 = _nt_age_restriction
              s0 << r10
              if r10
                r11 = _nt_notes
                s0 << r11
                if r11
                  if has_terminal?("\n", false, index)
                    r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("\n")
                    r13 = nil
                  end
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Show1)
      r0.extend(Show2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:show][start_index] = r0

    r0
  end

  module Date0
    def content
      [:date, text_value]
    end
  end

  def _nt_date
    start_index = index
    if node_cache[:date].has_key?(index)
      cached = node_cache[:date][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_month
      if r2
        r1 = r2
      else
        r3 = _nt_whitespace
        if r3
          r1 = r3
        else
          r4 = _nt_days
          if r4
            r1 = r4
          else
            if has_terminal?('\G[-/]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Date0)

    node_cache[:date][start_index] = r0

    r0
  end

  module Month0
    def content
        [:month, text_value]
    end
  end

  def _nt_month
    start_index = index
    if node_cache[:month].has_key?(index)
      cached = node_cache[:month][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("jan", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("jan")
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Month0)
    else
      if has_terminal?("feb", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("feb")
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Month0)
      else
        if has_terminal?("mar", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("mar")
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Month0)
        else
          if has_terminal?("apr", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure("apr")
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Month0)
          else
            if has_terminal?("may", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("may")
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(Month0)
            else
              if has_terminal?("jun", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure("jun")
                r6 = nil
              end
              if r6
                r0 = r6
                r0.extend(Month0)
              else
                if has_terminal?("jul", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure("jul")
                  r7 = nil
                end
                if r7
                  r0 = r7
                  r0.extend(Month0)
                else
                  if has_terminal?("aug", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure("aug")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                    r0.extend(Month0)
                  else
                    if has_terminal?("sep", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                      @index += 3
                    else
                      terminal_parse_failure("sep")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                      r0.extend(Month0)
                    else
                      if has_terminal?("oct", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 3))
                        @index += 3
                      else
                        terminal_parse_failure("oct")
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                        r0.extend(Month0)
                      else
                        if has_terminal?("nov", false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                          @index += 3
                        else
                          terminal_parse_failure("nov")
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                          r0.extend(Month0)
                        else
                          if has_terminal?("dec", false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 3))
                            @index += 3
                          else
                            terminal_parse_failure("dec")
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                            r0.extend(Month0)
                          else
                            @index = i0
                            r0 = nil
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:month][start_index] = r0

    r0
  end

  module Days0
    def content
      [:days, text_value]
    end
  end

  def _nt_days
    start_index = index
    if node_cache[:days].has_key?(index)
      cached = node_cache[:days][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Days0)
    end

    node_cache[:days][start_index] = r0

    r0
  end

  module Weekday0
    def content
        [:weekday, text_value]
    end
  end

  def _nt_weekday
    start_index = index
    if node_cache[:weekday].has_key?(index)
      cached = node_cache[:weekday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("sun", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("sun")
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Weekday0)
    else
      if has_terminal?("mon", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("mon")
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Weekday0)
      else
        if has_terminal?("tue", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("tue")
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Weekday0)
        else
          if has_terminal?("wed", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure("wed")
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Weekday0)
          else
            if has_terminal?("thr", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("thr")
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(Weekday0)
            else
              if has_terminal?("fri", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure("fri")
                r6 = nil
              end
              if r6
                r0 = r6
                r0.extend(Weekday0)
              else
                if has_terminal?("sat", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure("sat")
                  r7 = nil
                end
                if r7
                  r0 = r7
                  r0.extend(Weekday0)
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:weekday][start_index] = r0

    r0
  end

  module BandsAndVenuePrefix0
    def bands
      elements[0]
    end

    def venue_prefix
      elements[1]
    end
  end

  module BandsAndVenuePrefix1
    def content
      # only return the bands
      return elements[0].content
      # elements.map {|e| e.content}
    end
  end

  def _nt_bands_and_venue_prefix
    start_index = index
    if node_cache[:bands_and_venue_prefix].has_key?(index)
      cached = node_cache[:bands_and_venue_prefix][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_bands
    s0 << r1
    if r1
      r2 = _nt_venue_prefix
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BandsAndVenuePrefix0)
      r0.extend(BandsAndVenuePrefix1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:bands_and_venue_prefix][start_index] = r0

    r0
  end

  module Bands0
  end

  module Bands1
    def content
      [:bands, text_value]
    end
  end

  def _nt_bands
    start_index = index
    if node_cache[:bands].has_key?(index)
      cached = node_cache[:bands][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      r3 = _nt_venue_prefix
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r4 = nil
        end
        s1 << r4
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Bands0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Bands1)

    node_cache[:bands][start_index] = r0

    r0
  end

  module VenuePrefix0
    def content
      [:venue_prefix, text_value]
    end
  end

  def _nt_venue_prefix
    start_index = index
    if node_cache[:venue_prefix].has_key?(index)
      cached = node_cache[:venue_prefix][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(" at the ", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure(" at the ")
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(VenuePrefix0)
    else
      if has_terminal?(" at ", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure(" at ")
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(VenuePrefix0)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:venue_prefix][start_index] = r0

    r0
  end

  module Venue0
    def whitespace
      elements[0]
    end

    def age_restriction
      elements[1]
    end
  end

  module Venue1
  end

  module Venue2
    def content
      [:venue, text_value]
    end
  end

  def _nt_venue
    start_index = index
    if node_cache[:venue].has_key?(index)
      cached = node_cache[:venue][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      i3, s3 = index, []
      r4 = _nt_whitespace
      s3 << r4
      if r4
        r5 = _nt_age_restriction
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Venue0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r6 = nil
        end
        s1 << r6
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Venue1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Venue2)

    node_cache[:venue][start_index] = r0

    r0
  end

  module AgeRestriction0
  end

  module AgeRestriction1
    def content
      [:age_restriction, text_value]
    end
  end

  def _nt_age_restriction
    start_index = index
    if node_cache[:age_restriction].has_key?(index)
      cached = node_cache[:age_restriction][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      if has_terminal?('\G[\\d]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      if has_terminal?("+", false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("+")
        r4 = nil
      end
      s1 << r4
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(AgeRestriction0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(AgeRestriction1)
    else
      if has_terminal?("a/a", false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("a/a")
        r5 = nil
      end
      if r5
        r0 = r5
        r0.extend(AgeRestriction1)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:age_restriction][start_index] = r0

    r0
  end

  module Notes0
    def month
      elements[1]
    end
  end

  module Notes1
  end

  module Notes2
    def content
      [:notes, text_value]
    end
  end

  def _nt_notes
    start_index = index
    if node_cache[:notes].has_key?(index)
      cached = node_cache[:notes][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      i3, s3 = index, []
      if has_terminal?("\n", false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_month
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Notes0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r6 = nil
        end
        s1 << r6
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Notes1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Notes2)

    node_cache[:notes][start_index] = r0

    r0
  end

  module FirstDay0
    def month
      elements[0]
    end

    def whitespace
      elements[1]
    end

    def days
      elements[2]
    end
  end

  def _nt_first_day
    start_index = index
    if node_cache[:first_day].has_key?(index)
      cached = node_cache[:first_day][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_month
    s0 << r1
    if r1
      r2 = _nt_whitespace
      s0 << r2
      if r2
        r3 = _nt_days
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FirstDay0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:first_day][start_index] = r0

    r0
  end

  module Price0
  end

  def _nt_price
    start_index = index
    if node_cache[:price].has_key?(index)
      cached = node_cache[:price][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?("$", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("$")
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[$\\d\\./-]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Price0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("free", false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("free")
        r5 = nil
      end
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:price][start_index] = r0

    r0
  end

  module Time0
    def time
      elements[1]
    end
  end

  module Time1
    def hour
      elements[0]
    end

  end

  def _nt_time
    start_index = index
    if node_cache[:time].has_key?(index)
      cached = node_cache[:time][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_hour
    s0 << r1
    if r1
      i3, s3 = index, []
      i4 = index
      if has_terminal?("/", false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("/")
        r5 = nil
      end
      if r5
        r4 = r5
      else
        if has_terminal?(" and ", false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure(" and ")
          r6 = nil
        end
        if r6
          r4 = r6
        else
          if has_terminal?(" til ", false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure(" til ")
            r7 = nil
          end
          if r7
            r4 = r7
          else
            @index = i4
            r4 = nil
          end
        end
      end
      s3 << r4
      if r4
        r8 = _nt_time
        s3 << r8
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Time0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Time1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:time][start_index] = r0

    r0
  end

  def _nt_hour
    start_index = index
    if node_cache[:hour].has_key?(index)
      cached = node_cache[:hour][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[\\d:apm]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    if r1
      r0 = r1
    else
      if has_terminal?("noon", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("noon")
        r3 = nil
      end
      if r3
        r0 = r3
      else
        if has_terminal?("midnight", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 8))
          @index += 8
        else
          terminal_parse_failure("midnight")
          r4 = nil
        end
        if r4
          r0 = r4
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:hour][start_index] = r0

    r0
  end

  def _nt_annotations
    start_index = index
    if node_cache[:annotations].has_key?(index)
      cached = node_cache[:annotations][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[*$^@#\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:annotations][start_index] = r0

    r0
  end

end

class SFTheListParser < Treetop::Runtime::CompiledParser
  include SFTheList
end
